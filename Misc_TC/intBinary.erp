declare module binRev ;
declare module main ;
declare module exch ;
declare module twosComplement ;

<<<driver program>>>
start
	declare num, saveNum, len : integer ;
	declare neg : boolean ;

	neg := true ;
	get_value (num) ;
	neg := num < 0 ;	

	switch (neg) start case
	true :
		saveNum := -num ;
		num := saveNum ;
		break ; case
	false :
		saveNum := num ;
		break ; end

	len := 1 ;
	while (saveNum > 1)
	start
		saveNum := saveNum/2 ;
		len := len + 1 ;
	end

	declare bin : array [0 .. len] of integer ;
	use module main with parameters num, neg, bin ;

	print (bin) ;
end


<<module twosComplement>>
takes input [bin : array [0 .. len] of integer] ;
start
	declare i : integer ;
	i := len ;

	while (bin[i] != 1)
	start
		i := i - 1 ;
	end

	i := i - 1 ;
	while (i >= 0)
	start
		bin[i] := -(bin[i] - 1) ;
		i := i - 1 ;
	end
end

<<module main>>
takes input [num : integer, neg:boolean, bin : array [0 .. len] of integer] ;
start
	declare i : integer ;
	
	bin[0] := 0 ;
	bin[1] := bin[0] ;
	i := 1 ;
	while (num != 0)
	start
		bin [i] := num - (num/2)*2 ;
		num := num / 2 ;

		i := i + 1 ;
	end	

	use module binRev with parameters bin ;

	switch (neg) start case
	true :
		use module twosComplement with parameters bin ;
		break ; case 
	false :
		break ; end
end


<<module binRev>>
takes input [A : array [low .. high] of integer] ;
start
	declare i, j, n1, n2 : integer ;

	i := low + 1 ;
	j := high ;
	while (j > i)
	start
		n1 := A[i] ;
		n2 := A[j] ;
	
		[n1, n2] := use module exch with parameters n1, n2 ;

		A[i] := n1 ;
		A[j] := n2 ;		

		i := i + 1 ;
		j := j - 1 ;
	end
end

<<module exch>>
takes input [a : integer, b : integer] ;
returns [c : integer, d : integer] ;
start
	c := b ;
	d := a ;
end
